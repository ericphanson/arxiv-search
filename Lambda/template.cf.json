{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "The full stack for the paper processing pipeline of Arxiv-Search. ",
    "Resources": { 
        "InfrastructureLambdaPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "InfrastructureLambdaPolicy",
                "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : "*",
                                "Resource": [
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PrivateBucket", "Arn" ] }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PublicBucket", "Arn" ]  }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "IncomingBucket", "Arn" ]  }, "*"]]},
                                    { "Fn::GetAtt": [ "StatusTable", "Arn" ]  },
                                    { "Fn::GetAtt": [ "StatusTable", "StreamArn" ]  },
                                    { "Fn::GetAtt": [ "ProcessWrapperLambda", "Arn" ]  },
                                    { "Fn::GetAtt": [ "MakeThumbLambda", "Arn" ]  }
                                ]
                            },
                            {
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Effect": "Allow",
                                "Resource": "arn:aws:logs:*:*:*"
                            }
                        ]
                },
                "Roles" : [{"Ref" : "InfrastructureLambdaRole"}]
            }
        },
        "InfrastructureLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": ["sts:AssumeRole"],
                            "Principal" : {"Service" : ["lambda.amazonaws.com"]}
                    }]
                },
                "Path" : "/"
            }
        },
        "ProcessorLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": ["sts:AssumeRole"],
                            "Principal" : {"Service" : ["lambda.amazonaws.com"]}
                    }]
                },
                "Path" : "/"
            }
        },
        "ProcessorLambdaPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "ProcessorLambdaPolicy",
                "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : ["s3:GetObject", "s3:PutObject", "s3:DeleteObject", "s3:ListObjects", "s3:ReplicateObject"],
                                "Resource": [
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PrivateBucket", "Arn" ] }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PublicBucket", "Arn" ]  }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "IncomingBucket", "Arn" ]  }, "*"]]}
                                ]
                            },
                            {
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Effect": "Allow",
                                "Resource": "arn:aws:logs:*:*:*"
                            }
                        ]
                },
                "Roles" : [{"Ref" : "ProcessorLambdaRole"}]
            }
        },
        "PrivateBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            }
        },
        "PublicBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "PublicRead"
            }
        },
        "IncomingBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "NotificationConfiguration": {
                    "LambdaConfigurations": [{
                            "Event": "s3:ObjectCreated:*",
                            "Function": {"Fn::GetAtt": [  "WatchIncomingLambda", "Arn"]}
                    }]
                }
            },
            "DependsOn" : ["IncomingBucketPermission"]
        },
        "IncomingBucketPermission" : {
            "Type" : "AWS::Lambda::Permission", 
            "Properties" : {
                "Action" : "lambda:InvokeFunction",
                "FunctionName" : {"Fn::GetAtt" : ["WatchIncomingLambda", "Arn"]},
                "Principal" : "s3.amazonaws.com",
                "SourceAccount": {"Ref": "AWS::AccountId"}
            }
        },
        "StatusTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [  {  "AttributeName": "idvv", "AttributeType": "S" }  ],
                "KeySchema": [ { "AttributeName": "idvv", "KeyType": "HASH" } ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "StreamSpecification": {  "StreamViewType": "NEW_AND_OLD_IMAGES" }
            }
        },
        "StatusEventSourceMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "EventSourceArn": { "Fn::GetAtt": [ "StatusTable",  "StreamArn" ] },
                "FunctionName": { "Fn::GetAtt": [ "WatchStatusLambda", "Arn" ] },
                "BatchSize": 100,
                "StartingPosition": "TRIM_HORIZON"
            },
            "DependsOn": [
                "WatchStatusLambda",
                "StatusTable",
                "InfrastructureLambdaPolicy",
                "InfrastructureLambdaRole"
            ]
        },
        "WatchStatusLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Watches changes to the database and determines if it is possible to perform any processing on the papers.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": { "Fn::GetAtt": [ "StatusTable",  "Arn"  ]  },
                        "ProcessWrapperLambda": {  "Fn::GetAtt": [ "ProcessWrapperLambda", "Arn" ]  },
                        "MakeThumbLambda": { "Fn::GetAtt": [  "MakeThumbLambda", "Arn" ] },
                        "IncomingBucket": { "Fn::GetAtt": [  "IncomingBucket", "Arn" ] },
                        "PublicBucket": { "Fn::GetAtt": [ "PublicBucket",   "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.WatchStatusLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 60,
                "Runtime": "nodejs6.10"
            },
            "DependsOn" : [
                "InfrastructureLambdaRole",
                "InfrastructureLambdaPolicy"
            ]
        },
        "WatchIncomingLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Watches additions to the IncomingBucket and updates the corresponding entry on StatusTable.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": { "Fn::GetAtt": [  "StatusTable", "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.WatchIncomingLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 3,
                "Runtime": "nodejs6.10"
            }
        },
        "ProcessWrapperLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Wraps a processor lambda and updates the table after it executes.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": {  "Fn::GetAtt": [ "StatusTable", "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.ProcessWrapperLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 300,
                "Runtime": "nodejs6.10"
            }
        },
        "UpdateStatusLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Updates the status table with new entries and (TODO) updates elastic search.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": {  "Fn::GetAtt": [ "StatusTable", "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.UpdateStatusLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 300,
                "Runtime": "nodejs6.10"
            }
        },
        "MakeThumbLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Makes a thumbnail given a pdf using imagemagick",
                "Code": "./processors/MakeThumbLambda",
                "MemorySize": 128,
                "Handler": "index.handler",
                "Role": {"Fn::GetAtt" : ["ProcessorLambdaRole", "Arn"]},
                "Timeout": 100,
                "Runtime": "nodejs6.10"
            }
        },
        "ProcessFilesLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Process files passed through the API to workers.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": {  "Fn::GetAtt": [ "StatusTable", "Arn" ]  },
                        "IncomingBucket": { "Fn::GetAtt": [  "IncomingBucket", "Arn" ] }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.ProcessFilesLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 300,
                "Runtime": "nodejs6.10"
            }
        }
    }
}