{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "The full stack for the paper processing pipeline of Arxiv-Search. ",
    "Resources": { 
        "InfrastructureLambdaPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "InfrastructureLambdaPolicy",
                "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : "*",
                                "Resource": [
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PrivateBucket", "Arn" ] }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PublicBucket", "Arn" ]  }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "IncomingBucket", "Arn" ]  }, "*"]]},
                                    { "Fn::GetAtt": [ "StatusTable", "Arn" ]  },
                                    { "Fn::GetAtt": [ "StatusTable", "StreamArn" ]  },
                                    { "Fn::GetAtt": [ "ProcessWrapperLambda", "Arn" ]  },
                                    { "Fn::GetAtt": [ "MakeThumbLambda", "Arn" ]  },
                                    { "Fn::GetAtt": [ "MakeFullTextLambda", "Arn" ]  }
                                ]
                            },
                            {
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Effect": "Allow",
                                "Resource": "arn:aws:logs:*:*:*"
                            }
                        ]
                },
                "Roles" : [{"Ref" : "InfrastructureLambdaRole"}]
            }
        },
        "InfrastructureLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": ["sts:AssumeRole"],
                            "Principal" : {"Service" : ["lambda.amazonaws.com"]}
                    }]
                },
                "Path" : "/"
            }
        },
        "ProcessorLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": ["sts:AssumeRole"],
                            "Principal" : {"Service" : ["lambda.amazonaws.com"]}
                    }]
                },
                "Path" : "/"
            }
        },
        "ProcessorLambdaPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "ProcessorLambdaPolicy",
                "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : ["s3:GetObject", "s3:PutObject", "s3:DeleteObject", "s3:ListObjects", "s3:ReplicateObject"],
                                "Resource": [
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PrivateBucket", "Arn" ] }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "PublicBucket", "Arn" ]  }, "*"]]},
                                    {"Fn::Join":["/",[{ "Fn::GetAtt": [ "IncomingBucket", "Arn" ]  }, "*"]]}
                                ]
                            },
                            {
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Effect": "Allow",
                                "Resource": "arn:aws:logs:*:*:*"
                            }
                        ]
                },
                "Roles" : [{"Ref" : "ProcessorLambdaRole"}]
            }
        },
        "PrivateBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            }
        },
        "PublicBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "PublicRead"
            }
        },
        "IncomingBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "NotificationConfiguration": {
                    "LambdaConfigurations": [{
                            "Event": "s3:ObjectCreated:*",
                            "Function": {"Fn::GetAtt": [  "WatchIncomingLambda", "Arn"]}
                    }]
                }
            },
            "DependsOn" : ["IncomingBucketPermission"]
        },
        "IncomingBucketPermission" : {
            "Type" : "AWS::Lambda::Permission", 
            "Properties" : {
                "Action" : "lambda:InvokeFunction",
                "FunctionName" : {"Fn::GetAtt" : ["WatchIncomingLambda", "Arn"]},
                "Principal" : "s3.amazonaws.com",
                "SourceAccount": {"Ref": "AWS::AccountId"}
            }
        },
        "StatusTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [  {  "AttributeName": "idvv", "AttributeType": "S" }  ],
                "KeySchema": [ { "AttributeName": "idvv", "KeyType": "HASH" } ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "StreamSpecification": {  "StreamViewType": "NEW_AND_OLD_IMAGES" }
            }
        },
        "StatusEventSourceMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "EventSourceArn": { "Fn::GetAtt": [ "StatusTable",  "StreamArn" ] },
                "FunctionName": { "Fn::GetAtt": [ "WatchStatusLambda", "Arn" ] },
                "BatchSize": 100,
                "StartingPosition": "TRIM_HORIZON"
            },
            "DependsOn": [
                "WatchStatusLambda",
                "StatusTable",
                "InfrastructureLambdaPolicy",
                "InfrastructureLambdaRole"
            ]
        },
        "WatchStatusLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Watches changes to the database and determines if it is possible to perform any processing on the papers.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": { "Fn::GetAtt": [ "StatusTable",  "Arn"  ]  },
                        "ProcessWrapperLambda": {  "Fn::GetAtt": [ "ProcessWrapperLambda", "Arn" ]  },
                        "MakeThumbLambda": { "Fn::GetAtt": [  "MakeThumbLambda", "Arn" ] },
                        "MakeFullTextLambda": { "Fn::GetAtt": [  "MakeFullTextLambda", "Arn" ] },
                        "IncomingBucket": { "Fn::GetAtt": [  "IncomingBucket", "Arn" ] },
                        "PublicBucket": { "Fn::GetAtt": [ "PublicBucket",   "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.WatchStatusLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 60,
                "Runtime": "nodejs6.10"
            },
            "DependsOn" : [
                "InfrastructureLambdaRole",
                "InfrastructureLambdaPolicy"
            ]
        },
        "WatchIncomingLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Watches additions to the IncomingBucket and updates the corresponding entry on StatusTable.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": { "Fn::GetAtt": [  "StatusTable", "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.WatchIncomingLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 3,
                "Runtime": "nodejs6.10"
            }
        },
        "ProcessWrapperLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Wraps a processor lambda and updates the table after it executes.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": {  "Fn::GetAtt": [ "StatusTable", "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.ProcessWrapperLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 300,
                "Runtime": "nodejs6.10"
            }
        },
        "UpdateStatusLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Updates the status table with new entries and (TODO) updates elastic search.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": {  "Fn::GetAtt": [ "StatusTable", "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.UpdateStatusLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 300,
                "Runtime": "nodejs6.10"
            }
        },
        "BatchEditStatusTableLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "A lambda to be manually run to edit the status table. Shouldn't be invokable from other lambdas etc. ",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": {  "Fn::GetAtt": [ "StatusTable", "Arn" ]  }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.BatchEditStatusTableLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 300,
                "Runtime": "nodejs6.10"
            }
        },
        "MakeThumbLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Makes a thumbnail given a pdf using imagemagick",
                "Code": "./processors/MakeThumbLambda",
                "MemorySize": 128,
                "Handler": "index.handler",
                "Role": {"Fn::GetAtt" : ["ProcessorLambdaRole", "Arn"]},
                "Timeout": 100,
                "Runtime": "nodejs6.10"
            }
        },
        "MakeFullTextLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Extracts the fulltext given a pdf using PDF.js",
                "Code": "./processors/MakeFullTextLambda",
                "MemorySize": 128,
                "Handler": "index.handler",
                "Role": {"Fn::GetAtt" : ["ProcessorLambdaRole", "Arn"]},
                "Timeout": 100,
                "Runtime": "nodejs6.10"
            }
        },
        "ProcessFilesLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Process files passed through the API to workers.",
                "Code": "./infrastructure",
                "Environment": {
                    "Variables": {
                        "StatusTable": {  "Fn::GetAtt": [ "StatusTable", "Arn" ]  },
                        "IncomingBucket": { "Fn::GetAtt": [  "IncomingBucket", "Arn" ] }
                    }
                },
                "MemorySize": 128,
                "Handler": "out/index.ProcessFilesLambda",
                "Role": {"Fn::GetAtt" : ["InfrastructureLambdaRole", "Arn"]},
                "Timeout": 300,
                "Runtime": "nodejs6.10"
            }
        },
        "ProcessFilesLambdaPermission" : {
            "Type" : "AWS::Lambda::Permission",
            "Properties" : {
                "Action" : "lambda:InvokeFunction",
                "FunctionName" : {"Fn::GetAtt" : ["ProcessFilesLambda", "Arn"]},
                "Principal" : "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RequestWorkAPI}/*/POST/*"
                }
            }
        },
        "RestApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": { "Ref": "RequestWorkAPI"},
                "StageName": "v1"
            }
        },
        "RequestWorkAPI" : {
            "Type" : "AWS::ApiGateway::RestApi",
            "Properties" : {
                "Description" : "Used by paper downloaders to request papers that need to be downloaded.",
                "Body" : {
                    "swagger": "2.0",
                    "info": {
                        "version": "2018-03-09T15:12:06Z",
                        "title": "testAPI"
                    },
                    "host": "d93p49z8ua.execute-api.us-east-1.amazonaws.com",
                    "basePath": "/dev",
                    "schemes": ["https" ],
                    "paths": {
                        "/testprocesswork": {
                        "post": {
                            "produces": ["application/json"],
                            "responses": {
                            "200": {
                                "description": "200 response",
                                "schema": {"$ref": "#/definitions/Empty" },
                                "headers": {"Access-Control-Allow-Origin": {"type": "string"  } }
                            }
                            },
                            "x-amazon-apigateway-integration": {
                            "responses": {
                                "default": {
                                    "statusCode": "200",
                                    "responseParameters": { "method.response.header.Access-Control-Allow-Origin": "'*'"}
                                }
                            },
                            "uri" : {"Fn::Join": ["",["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["ProcessFilesLambda", "Arn"]}, "/invocations"]]},
                            "passthroughBehavior": "when_no_match",
                            "httpMethod": "POST",
                            "contentHandling": "CONVERT_TO_TEXT",
                            "type": "aws_proxy"
                            }
                        },
                        "options": {
                            "consumes": ["application/json"],
                            "produces": ["application/json"],
                            "responses": {
                            "200": { 
                                "description": "200 response",
                                "schema": {"$ref": "#/definitions/Empty"},
                                "headers": {
                                    "Access-Control-Allow-Origin": {"type": "string"},
                                    "Access-Control-Allow-Methods": {"type": "string"},
                                    "Access-Control-Allow-Headers": {"type": "string"}
                                }
                            }
                            },
                            "x-amazon-apigateway-integration": {
                            "responses": {
                                "default": {
                                    "statusCode": "200",
                                    "responseParameters": {
                                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                                    }
                                }
                            },
                            "requestTemplates": {"application/json": "{\"statusCode\": 200}"},
                            "passthroughBehavior": "when_no_match",
                            "type": "mock"
                            }
                        }
                        }
                    },
                    "definitions": {
                        "Empty": {
                        "type": "object",
                        "title": "Empty Schema"
                        }
                    },
                    "x-amazon-apigateway-gateway-responses": {
                        "DEFAULT_5XX": {
                        "responseParameters": {
                            "gatewayresponse.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                            "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                            "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        }
                        },
                        "DEFAULT_4XX": {
                        "responseParameters": {
                            "gatewayresponse.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                            "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                            "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        }
                        }
                    }
                    }
            }
        }
    }
}