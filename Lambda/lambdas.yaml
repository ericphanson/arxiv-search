AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.
Resources:

  # API
  Api1:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: lambda

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - processwork
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: Api1
          - "/*"

  Api1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api1
      ParentId: 
        Fn::GetAtt: 
          - "Api1"
          - "RootResourceId"
      PathPart: "process-work"

  Api1OPTIONS:
    DependsOn: LambdaPermission
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref Api1Resource
      RestApiId: !Ref Api1
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  ProcessWorkRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: 'arn:aws:iam::351532156193:role/lambda_everything'
        Uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                - processwork
                - Arn
              - "/process_work"
        IntegrationResponses:
          - StatusCode: 200
      ResourceId:
        Ref: Api1Resource
      RestApiId:
        Ref: Api1
      MethodResponses:
        - StatusCode: 200

  ##########################
  # INFRASTRUCTURE
  ##########################

  # infrastructure/add-new-papers-to-db.ts
  addnewpaperstodb:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: ts-compiled/infrastructure/add-new-papers-to-db.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 300
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'
  # infrastructure/add-new-arxiv-incoming-process.js
  arxivincomingprocess:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: infrastructure/add-new-arxiv-incoming-process.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: Bucket1
            Events:
              - 's3:ObjectCreated:*'
  Bucket1:
    Type: 'AWS::S3::Bucket'
  # infrastructure/papers-status-stream-parser.js
  papersstatusstreamparser:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: infrastructure/papers-status-stream-parser.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'
      Events:
        DynamoDB1:
          Type: DynamoDB
          Properties:
            Stream:
              'Fn::GetAtt':
                - Table1
                - StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
  Table1:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  # infrastructure/process-work.ts
  processwork:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: ts-compiled/infrastructure/process-work.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 60
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'

  # infrastructure/try-errors-again.js
  tryerrorsagain:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: infrastructure/try-errors-again.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'
  # infrastructure/wrapper.js
  wrapper:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'

  ##########################
  # PROCESSORS
  ##########################

  # processors/api-update-papers-status/api-update-papers-status.js
  apiupdatepapersstatus:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: processors/api-update-papers-status/api-update-papers-status.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /api-update-papers-status
            Method: ANY
        Api2:
          Type: Api
          Properties:
            Path: /papers-status
            Method: PUT
  # processors/extract-definitions-from-tex/extract_definitions_from_tex.py
  extractdefinitionsfromtex:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: processors.extractdefinitionsfromtex.extract_definitions_from_tex.lambda_handler
      Runtime: python3.6
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'
  # processors/make-thumb-from-papers-status-update
  makethumbfrompapersstatusupdate:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: processors/make-thumb-from-papers-status-update/make-thumb-from-papers-status-update.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          S3_BUCKET: arxiv-search-lambda-code
      CodeUri: .
      Description: ''
      MemorySize: 128
      Timeout: 60
      Role: 'arn:aws:iam::351532156193:role/lambda_everything'
