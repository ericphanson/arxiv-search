# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: AS

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: nodejs6.10


iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  ProcessFilesLambda:
    handler: ./infrastructure/./infrastructure/out/index.ProcessFilesLambda
    events:
       - http: GET processwork

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    InfrastructureLambdaPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: InfrastructureLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: '*'
              Resource:
                - Fn::Join:
                  - /
                  - - Fn::GetAtt: 
                      - PrivateBucket
                      - Arn
                    - '*'
                - Fn::Join: 
                  - /
                  - - Fn::GetAtt: 
                      - PublicBucket
                      - Arn
                    - '*'
                - Fn::Join: 
                  - /
                  - - Fn::GetAtt: 
                      - IncomingBucket
                      - Arn
                    - '*'
                - Fn::GetAtt: 
                  - StatusTable
                  - Arn
                - Fn::GetAtt: 
                  - StatusTable
                  - StreamArn
                - Fn::GetAtt: 
                  - ProcessWrapperLambda
                  - Arn
                - Fn::GetAtt: 
                  - MakeThumbLambda
                  - Arn
            - Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Effect: Allow
              Resource: 'arn:aws:logs:*:*:*'
        Roles:
          - Fn::Ref: InfrastructureLambdaRole
    InfrastructureLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'sts:AssumeRole'
              Principal:
                Service:
                  - lambda.amazonaws.com
        Path: /
    ProcessorLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'sts:AssumeRole'
              Principal:
                Service:
                  - lambda.amazonaws.com
        Path: /
    ProcessorLambdaPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: ProcessorLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
                - 's3:ListObjects'
                - 's3:ReplicateObject'
              Resource:
                - Fn::Join: 
                  - /
                  - - Fn::GetAtt: 
                      - PrivateBucket
                      - Arn
                    - '*'
                - Fn::Join: 
                  - /
                  - - Fn::GetAtt: 
                      - PublicBucket
                      - Arn
                    - '*'
                - Fn::Join: 
                  - /
                  - - Fn::GetAtt: 
                      - IncomingBucket
                      - Arn
                    - '*'
            - Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Effect: Allow
              Resource: 'arn:aws:logs:*:*:*'
        Roles:
          - Fn::Ref: ProcessorLambdaRole
    PrivateBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: Private
    PublicBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
    IncomingBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Function: 
                - Fn::GetAtt: 
                  - WatchIncomingLambda
                  - Arn
      DependsOn:
        - IncomingBucketPermission
    IncomingBucketPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: 
          - Fn::GetAtt: 
            - WatchIncomingLambda
            - Arn
        Principal: s3.amazonaws.com
        SourceAccount: 
          - Fn::Ref: 
            - 'AWS::AccountId'
    StatusTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: idvv
            AttributeType: S
        KeySchema:
          - AttributeName: idvv
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    StatusEventSourceMapping:
      Type: 'AWS::Lambda::EventSourceMapping'
      Properties:
        EventSourceArn: 
          - Fn::GetAtt:
            - StatusTable
            - StreamArn
        FunctionName: 
          - Fn::GetAtt: 
            - WatchStatusLambda
            - Arn
        BatchSize: 100
        StartingPosition: TRIM_HORIZON
      DependsOn:
        - WatchStatusLambda
        - StatusTable
        - InfrastructureLambdaPolicy
        - InfrastructureLambdaRole
    WatchStatusLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Description: >-
          Watches changes to the database and determines if it is possible to
          perform any processing on the papers.
        Environment:
          Variables:
            StatusTable: 
              - Fn::GetAtt: 
                - StatusTable
                - Arn
            ProcessWrapperLambda: 
              - Fn::GetAtt: 
                - ProcessWrapperLambda
                - Arn
            MakeThumbLambda: 
              - Fn::GetAtt: 
                - MakeThumbLambda
                - Arn
            IncomingBucket: 
              - Fn::GetAtt: 
                - IncomingBucket
                - Arn
            PublicBucket: 
              - Fn::GetAtt: 
                - PublicBucket
                - Arn
        MemorySize: 128
        Handler: ./infrastructure/out/index.WatchStatusLambda
        Role: 
          - Fn::GetAtt: 
            - InfrastructureLambdaRole
            - Arn
        Timeout: 60
        Runtime: nodejs6.10
      DependsOn:
        - InfrastructureLambdaRole
        - InfrastructureLambdaPolicy
    WatchIncomingLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Description: >-
          Watches additions to the IncomingBucket and updates the corresponding
          entry on StatusTable.
        Environment:
          Variables:
            StatusTable: 
              - Fn::GetAtt: 
                - StatusTable
                - Arn
        MemorySize: 128
        Handler: ./infrastructure/out/index.WatchIncomingLambda
        Role: 
          - Fn::GetAtt: 
            - InfrastructureLambdaRole
            - Arn
        Timeout: 3
        Runtime: nodejs6.10
    ProcessWrapperLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Description: Wraps a processor lambda and updates the table after it executes.
        Environment:
          Variables:
            StatusTable: 
              - Fn::GetAtt: 
                - StatusTable
                - Arn
        MemorySize: 128
        Handler: ./infrastructure/out/index.ProcessWrapperLambda
        Role: 
          - Fn::GetAtt: 
            - InfrastructureLambdaRole
            - Arn
        Timeout: 300
        Runtime: nodejs6.10
    UpdateStatusLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Description: >-
          Updates the status table with new entries and (TODO) updates elastic
          search.
        Environment:
          Variables:
            StatusTable: 
              - Fn::GetAtt: 
                - StatusTable
                - Arn
        MemorySize: 128
        Handler: ./infrastructure/out/index.UpdateStatusLambda
        Role: 
          - Fn::GetAtt: 
            - InfrastructureLambdaRole
            - Arn
        Timeout: 300
        Runtime: nodejs6.10
    MakeThumbLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Description: Makes a thumbnail given a pdf using imagemagick
        MemorySize: 128
        Handler: ./processors/MakeThumbLambda/index.handler
        Role: 
          - Fn::GetAtt: 
            - ProcessorLambdaRole
            - Arn
        Timeout: 100
        Runtime: nodejs6.10

